@page "/projects/department/{DepartmentId:int}"
@inject IEmptyClass EmptyClass
@inject RelationDataAccess relationDataAccess
@inject DepartmentDataAccess departmentDataAccess

<PageTitle>Projects - @EmptyClass.Location</PageTitle>
<ProjectNavigation emptyClass="@EmptyClass"></ProjectNavigation>
<!-- Info cards -->
<div class="row">
    <div class="col-lg-4 mb-3">
        <div class="card p-0 h-100" style="background-image: linear-gradient(180deg, rgba(25,55,80,1) 0%, rgba(50,110,129,1) 80%); color: rgb(250,250,250); ">
            <div class="card-header">
                Information
            </div>
            <div class="card-body">
                <p class="card-text">@departmentInfo.Department_info</p>
                <p></p>
            </div>
        </div>
    </div>
    <div class="col-lg-4 mb-3">
        <div class="card p-0 h-100" style="background-image: linear-gradient(180deg, rgba(25,55,80,1) 0%, rgba(50,110,129,1) 80%); color: rgb(250,250,250); ">
            <div class="card-header">
                
            </div>
            <div class="card-body">
                <p class="card-text"></p>
            </div>
        </div>
    </div>
    <div class="col-lg-4 mb-3">
        <div class="card p-0 h-100" style="background-image: linear-gradient(180deg, rgba(25,55,80,1) 0%, rgba(50,110,129,1) 80%); color: rgb(250,250,250); ">
            <div class="card-header">
                
            </div>
            <div class="card-body">
                <p class="card-text"></p>
            </div>
        </div>
    </div>
</div>
<!-- Child relation cards -->
<div class="row row-cols-1 row-cols-sm-2 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 row-cols-xxl-5 g-4">
    @foreach (RelationModel childRelation in ChildRelations)
    {
        <ProjectCard OnClickCallback="ClickCard" CardId="@childRelation.Id" CardName="@childRelation.Relation_name" CardText="Some project descriptive text here" FooterText="..."></ProjectCard>
    }
</div>
<!--  Edit menu -->
<div class="dropup" style=" position: absolute; right: 20px; bottom: 20px;">
    <button type="button" class="btn btn-primary dropdown p-1" data-bs-toggle="dropdown">
        <span class="oi oi-plus p-1" aria-hidden="true"></span>
    </button>
    <ul class="dropdown-menu">
        <li><button type="button" data-bs-toggle="modal" data-bs-target="#addChildModal" class="dropdown-item">Add</button></li>
        <li><button type="button" data-bs-toggle="modal" data-bs-target="#editRelationModal" class="dropdown-item">Edit relation</button></li>
        <li><button type="button" data-bs-toggle="modal" data-bs-target="#editDepartmentInfoModal" class="dropdown-item">Edit info</button></li>
    </ul>
</div>
<!-- Modals -->
<AddChildModal ParentId="@DepartmentId" RoleId="3" OnSubmitCallback="@SubmitAddProject"></AddChildModal>
<EditRelationModal UpdatedRelation="@department" ParentId="@department.Parent_id" OnSubmitCallback="@SubmitUpdateDepartment"></EditRelationModal>
<DeleteChildModal ClickedCardId="@ClickedCardId" OnSubmitCallback="@SubmitDeleteProject"></DeleteChildModal>
<EditDepartmentInfoModal  UpdatedDepartment="@departmentInfo" OnSubmitCallback="@SubmitUpdateDepartment" ></EditDepartmentInfoModal>
@code {
    #region PageBase
    [Parameter]
    public int DepartmentId { get; set; }
    private int? ClickedCardId { get; set; }
    private RelationModel department = new();
    private DepartmentModel departmentInfo = new();
    private List<RelationModel> ChildRelations = new();
    protected override async Task OnInitializedAsync()
    {
        GetRelationWithId();
        await GetChildRelations();
        EmptyClass.SetDepartment(department.Relation_name, DepartmentId);
    }
    //Get relation
    private void GetRelationWithId()
    {
        department = relationDataAccess.GetRelation(DepartmentId);
        departmentInfo = departmentDataAccess.GetDepartment(DepartmentId);
    }
    //Get all child relations
    private async Task GetChildRelations()
    {
        ChildRelations = await relationDataAccess.GetChildRelationsAsync(DepartmentId);
    }
    protected void ClickCard(int? id)
    {
        ClickedCardId = id;
    }
    #endregion
    #region FeatureCreateNewProject
    private async Task SubmitAddProject()
    {
        await GetChildRelations();
    }
    #endregion
    #region FeatureDeleteProject
    private async Task SubmitDeleteProject()
    {
        await GetChildRelations();
    }
    #endregion
    #region FeatureUpdateDepartment
    private void SubmitUpdateDepartment()
    {
    }
    #endregion
}