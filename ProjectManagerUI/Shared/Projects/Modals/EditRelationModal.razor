<!-- Modal - Edit relation -->
<div class="modal fade" id="editRelationModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="editRelationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editRelationModalLabel">Edit Relation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <EditForm Model="@UpdatedRelation" OnSubmit="@OnSubmit" class="row g-3">
                    <div class="col-12 mb-1">
                        <label for="editRelationModalInput1" class="form-label">Name</label>
                        <InputText class="form-control" id="editRelationModalInput1" @bind-Value="UpdatedRelation!.Relation_name" />
                    </div>
                    <div class="col-12 mb-1">
                        <label for="editRelationModalInput2" class="form-label">Parent relation</label>
                        <InputSelect class="form-select" id="editRelationModalInput2" @bind-Value="UpdatedRelation!.Parent_id">
                            <option selected>Select parent ...</option>
                            @if (PossibleParents is not null)
                            {
                                @foreach (var item in PossibleParents)
                                {
                                    <option value="@item.Id">@item.Relation_name</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Update</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public RelationModel UpdatedRelation { get; set; } = new();
    [Parameter]
    public int? ParentId { get; set; }
    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetPossibleParents();
    }

    private List<RelationModel> PossibleParents = new();
    private async Task GetPossibleParents()
    {
        if (ParentId >= 0)
        {
            RelationModel parent = RelationDataAccess.GetRelation(ParentId);
            PossibleParents = await RelationDataAccess.GetChildRelations(parent.Parent_id);
        }
    }

    public async Task OnSubmit()
    {
        var result = await RelationDataAccess.UpdateRelationAsync(UpdatedRelation);
        await OnSubmitCallback.InvokeAsync();
    }
}